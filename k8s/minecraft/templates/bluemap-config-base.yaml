apiVersion: v1
kind: ConfigMap
metadata:
  name: bluemap-config-base
data:
  core.conf: |
    ##                          ##
    ##         BlueMap          ##
    ##       Core-Config        ##
    ##                          ##

    # By changing the setting (accept-download) below to TRUE you are indicating that you have accepted mojang's EULA (https://account.mojang.com/documents/minecraft_eula),
    # you confirm that you own a license to Minecraft (Java Edition)
    # and you agree that BlueMap will download and use a minecraft-client file (depending on the minecraft-version) from mojangs servers (https://launcher.mojang.com/) for you.
    # This file contains resources that belong to mojang and you must not redistribute it or do anything else that is not compliant with mojang's EULA.
    # BlueMap uses resources in this file to generate the 3D-Models used for the map and texture them. (BlueMap will not work without those resources.)
    # 2024-01-05T03:38:03
    accept-download: true

    # The folder where bluemap saves data-files it needs during runtime or to save e.g. the render-progress to resume it later.
    # Default is "bluemap"
    data: "data"

    # This changes the amount of threads that BlueMap will use to render the maps.
    # A higher value can improve render-speed but could impact performance on the host machine.
    # This should be always below or equal to the number of available processor-cores.
    # Zero or a negative value means the amount of of available processor-cores subtracted by the value.
    # (So a value of -2 with 6 cores results in 4 render-processes)
    # Default is 1
    render-thread-count: 1

    # Controls whether BlueMap should try to find and load mod-resources and datapacks from the server/world-directories.
    # Default is true
    scan-for-mod-resources: true

    # If this is true, BlueMap might send really basic metrics reports containing only the implementation-type and the version that is being used to https://metrics.bluecolored.de/bluemap/
    # This allows me to track the basic usage of BlueMap and helps me stay motivated to further develop this tool! Please leave it on :)
    # An example report looks like this: {"implementation":"bukkit","version":"3.20"}
    # Default is true
    metrics: true

    # Config-section for debug-logging
    log: {
      # The file where the debug-log will be written to.
      # Comment out to disable debug-logging completely.
      # Java String formatting syntax can be used to add time, see: https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html
      # Default is no logging
      file: "data/logs/debug.log"
      #file: "data/logs/debug_%1$tF_%1$tT.log"

      # Whether the logger should append to an existing file, or overwrite it
      # Default is false
      append: false
    }
  webapp.conf: |
    ##                          ##
    ##         BlueMap          ##
    ##      Webapp-Config       ##
    ##                          ##

    # With this setting you can disable the creation and updating of all web-app related files
    # Default is true
    enabled: true

    # The webroot where the web-application files will be created.
    # Usually this should be set to the same directory like in the webserver.conf!
    # Default is "bluemap/web"
    webroot: "web"

    # Whether the settings.json of the webapp should be updated/synchronized with the current bluemap settings.
    # If this is set to "false", bluemap will only add maps to the settings.json but never remove unknown ones or update other settings.
    # Disabling this is for example useful if you are running multiple bluemap instances on the same webroot and don't want them to overwrite each others maps.
    # Default is true
    update-settings-file: true

    # If the web-application should use cookies to save the configurations of a user.
    # Default is true
    use-cookies: true

    # If the free-flight-mode in the web-application is enabled or not.
    # Default is true
    enable-free-flight: true

    # If the webapp will default to flat-view instead of perspective-view.
    # Default is false
    default-to-flat-view: false

    # The default map and camera-location where a user will start after opening the webapp.
    # This is in form of the url-anchor: Open your map in a browser and look at the url, everything after the '#' is the value for this setting.
    # Default is "no anchor" -> The camera will start with the topmost map and at that map's starting point.
    #start-location: "world:0:16:-32:390:0.1:0.19:0:0:perspective"

    # The minimum (closest) and maximum (furthest) distance (in blocks) that the camera can be from the ground
    min-zoom-distance: 5
    max-zoom-distance: 100000

    # The default value of the resolution (settings-menu)
    # Possible values are: 0.5, 1, 2
    # Default is 1
    resolution-default: 1

    # The min, max and default values of the hires render-distance slider (settings-menu)
    # The values are in blocks.
    # Default is max:500 default:100 and min:0
    hires-slider-max: 500
    hires-slider-default: 100
    hires-slider-min: 0

    # The min, max and default values of the lowres render-distance slider (settings-menu)
    # The values are in blocks.
    # Default is max:7000 default:2000 and min:500
    lowres-slider-max: 7000
    lowres-slider-default: 2000
    lowres-slider-min: 500

    # Here you can add URLs to custom scripts (js) so they will be loaded by the webapp
    # You can place them somewhere in bluemap's webroot and add the (relative) link here
    scripts: [
        #"js/my-custom-script.js"
    ]

    # Here you can add URLs to custom styles (css) so they will be loaded by the webapp
    # You can place them somewhere in bluemap's webroot and add the (relative) link here
    styles: [
        #"css/my-custom-style.css"
    ]
  webserver.conf: |
    ##                          ##
    ##         BlueMap          ##
    ##     Webserver-Config     ##
    ##                          ##

    # With this setting you can disable the integrated web-server.
    # This is useful if you want to only render the map-data for later use, or if you setup your own webserver.
    # Default is enabled
    enabled: true

    # The webroot that the server will host to the web.
    # Usually this should be set to the same directory like in the webapp.conf!
    # Default is "bluemap/web"
    webroot: "web"

    # The port that the webserver listens to.
    # Default is 8100
    port: 8100

    # Config-section for webserver-activity logging
    log: {
      # The file where all the webserver-activity will be logged to.
      # Comment out to disable the logging completely.
      # Java String formatting syntax can be used to add time, see: https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html
      # Default is no logging
      file: "data/logs/webserver.log"
      #file: "data/logs/webserver_%1$tF_%1$tT.log"

      # Whether the logger should append to an existing file, or overwrite it
      # Default is false
      append: false

      # The format of the webserver-acivity logs.
      # The syntax is the java String formatting, see: https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html
      # Possible Arguments:
      #  1 - the source address (ignoring any xff headers)
      #  2 - the source address (using the (leftmost) xff header if provided)
      #  3 - the http-method of the request
      #  4 - the full request-address
      #  5 - the protocol version of the request
      #  6 - the status-code of the response
      #  7 - the status-message of the response
      # Default is "%1$s \"%3$s %4$s %5$s\" %6$s %7$s"
      format: "%1$s \"%3$s %4$s %5$s\" %6$s %7$s"
    }
